plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

repositories {
    mavenCentral()
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
        content {
            includeGroup "alexiil.mc.lib"
        }
    }
    maven {
        url = 'https://jitpack.io'
        content {
            includeGroup 'com.github.DimensionalDevelopment'
            includeGroup 'com.github.Draylar'
        }
    }
    maven { url = 'https://maven.jamieswhiteshirt.com/libs-release/' }
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://hephaestus.dev/release' }
    maven { url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven { url = 'https://server.bbkr.space/artifactory/libs-release'
        content {
            includeGroup 'io.github.cottonmc'
        }
    }
    maven { url = 'https://ladysnake.jfrog.io/artifactory/mods' }
    maven { url = 'https://maven.shedaniel.me/' }
	maven { url = 'https://bai.jfrog.io/artifactory/maven' }
    // Changed because maven went down
    maven { url = 'https://maven.quiltmc.org/repository/release/' }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        name "Siphalor's Maven"
        url "https://maven.siphalor.de"
    }

}

def includeCompile(group, artifact, version) {
    project.dependencies {
        modCompileOnly("$group:$artifact:$version") {
            exclude module: "fabric-api"
        }
        modRuntime("$group:$artifact:$version") {
            exclude module: "fabric-api"
        }
        include("$group:$artifact:$version")
    }
    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", group)
                    depNode.appendNode("artifactId", artifact)
                    depNode.appendNode("version", version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            //srcDir "src/main/schematics"
            //srcDir "src/main/config"
        }
    }
    // datagen
}

minecraft {
    accessWidener = file('src/main/resources/mod_science.accesswidener')
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    includeCompile("com.flowpowered", "flow-math", "1.0.3")
    includeCompile("org.jgrapht", "jgrapht-core", "1.1.0")
    includeCompile("com.github.DimensionalDevelopment", "poly2tri.java", "0.1.1")
    includeCompile("com.github.DimensionalDevelopment", "Matrix", project.matrix_version)
    includeCompile("com.github.Draylar", "magna", "${project.magna_version}-1.17")
//	includeCompile("io.github.BoogieMonster1O1", "OpenWorlds", "c57e3ef")
//	includeCompile("io.github.cottonmc", "LibGui", "4.0.0-alpha.1+21w11a")
    includeCompile("me.shedaniel.cloth", "cloth-config-fabric", project.cloth_config_version)
    includeCompile("io.github.onyxstudios.Cardinal-Components-API", "cardinal-components-base", project.cca_version)
    includeCompile("io.github.onyxstudios.Cardinal-Components-API", "cardinal-components-item", project.cca_version)
    includeCompile("io.github.onyxstudios.Cardinal-Components-API", "cardinal-components-entity", project.cca_version)
    includeCompile("io.github.onyxstudios.Cardinal-Components-API", "cardinal-components-level", project.cca_version)
    includeCompile("io.github.onyxstudios.Cardinal-Components-API", "cardinal-components-util", project.cca_version)
    includeCompile("io.github.onyxstudios.Cardinal-Components-API", "cardinal-components-world", project.cca_version)
    includeCompile("io.github.onyxstudios.Cardinal-Components-API", "cardinal-components-chunk", project.cca_version)
    //includeCompile("dev.hephaestus", "seedy-behavior", "1.0.1")
    modImplementation "de.siphalor:nbtcrafting-1.17:2+"
    modImplementation("alexiil.mc.lib:libblockattributes-all:${project.lba_version}")
    include("alexiil.mc.lib:libblockattributes-all:${project.lba_version}")
//    dependencies.ext.lib("alexiil.mc.lib:libblockattributes-fluids:${project.lba_version}")
//    dependencies.ext.lib("alexiil.mc.lib:libblockattributes-items:${project.lba_version}")
//    //modImplementation("alexiil.mc.lib:libblockattributes-core:${project.lba_version}")
//    modImplementation("alexiil.mc.lib:libblockattributes-fluids:${project.lba_version}")
//    modImplementation("alexiil.mc.lib:libblockattributes-items:${project.lba_version}")
//    modImplementation("alexiil.mc.lib:libnetworkstack-base:${project.libnetworkstack_version}")
////    includeCompile("alexiil.mc.lib", "libblockattributes-core", project.lba_version)
//    includeCompile("alexiil.mc.lib", "libblockattributes-items", project.lba_version)
//    includeCompile("alexiil.mc.lib", "libblockattributes-base", project.lba_version)
//    includeCompile("alexiil.mc.lib", "libblockattributes-fluids", project.lba_version)
//    modImplementation include("alexiil.mc.lib:libblockattributes:0.9.0")

    modImplementation include("io.github.cottonmc:LibGui:4.1.0+1.17")

    modImplementation("software.bernie.geckolib:geckolib-fabric-1.17:${project.geckolib_version}:dev")
    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    modCompileOnly("com.terraformersmc:modmenu:2.0.0-beta.7") {
        exclude module: "fabric-api"
    }
    modRuntime("com.terraformersmc:modmenu:2.0.0-beta.7") {
        exclude module: "fabric-api"
    }

    modRuntime('mcp.mobius.waila:wthit:fabric-3.5.2') {
        exclude module: "modmenu"
        exclude module: "fabric-api"
    }

    modCompileOnly "me.shedaniel.cloth.api:cloth-datagen-api-v1:2.0.0"
    modRuntime "me.shedaniel.cloth.api:cloth-datagen-api-v1:2.0.0"
//    modCompileOnly "worldedit:worldedit:7.2.6"
//    modRuntime "worldedit:worldedit:7.2.6"

    modImplementation "curse.maven:fabric-disable-custom-worlds-advice-401978:3346861"


//    datagenImplementation sourceSets.main.output
//    datagenImplementation sourceSets.main.compileClasspath
//    datagenRuntimeOnly sourceSets.main.runtimeClasspath

    testImplementation('junit:junit:4.13.2')
    // testImplementation('net.devtech:PotatoUnit-fabric:1.0.0')
    //testImplementation('net.devtech:PotatoUnit:1.0.2')
}

version = computeVersion(project.mod_version as String)
archivesBaseName = "ModScience"

static def computeVersion(String version) {
    if (version.contains("alpha") || version.contains("beta")) {
        return version + "-" + Calendar.getInstance().getTime().format("dd.MM.yyyy")
    }
    return version
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    inputs.property "version", project.version
}

artifacts {
    archives jar
}

/*
curseforge {
    if (project.hasProperty('curse_api_key')) {
        apiKey = project.getProperty('curse_api_key')
    }
    project {
        id = ''
        changelog = file('changelog.txt').text
        releaseType = 'alpha'
        addGameVersion '1.17'
        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
            displayName = "Mod Science ${version}"
        }
        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
    options {
        forgeGradleIntegration = false
    }
}
 */

test {
    workingDir = file('test')

    systemProperty('fabric.dli.config', file('.gradle/loom-cache/launch.cfg').getAbsolutePath())
    //useJUnitPlatform()
}

tasks.test.doFirst { Test test ->
    if (!test.workingDir.exists()) {
        test.workingDir.mkdirs();
    }
}
